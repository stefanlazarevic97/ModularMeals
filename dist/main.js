!function(){"use strict";var t={d:function(e,n){for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}};!function(){function e(t,e,n,a,i){t.append("text").attr("x",n/2).attr("y",10).attr("text-anchor","middle").style("font-size","16px").style("font-weight","bold").text("Macronutrient Breakdown");var r=Math.min(n,a)/2,o=d3.scaleOrdinal().domain(e.map((t=>t.name))).range(d3.schemeCategory10),l=d3.pie().value((t=>t.value)),u=d3.arc().innerRadius(0).outerRadius(r),d=t.append("g").attr("transform","translate("+n/2+","+a/2+")").selectAll(".arc").data(l(e)).enter().append("g").attr("class","arc");d.append("path").attr("d",u).style("fill",(t=>o(t.data.name))),d.append("text").attr("transform",(t=>"translate("+u.centroid(t)+")")).attr("dy",".35em").style("text-anchor","middle").text((t=>t.data.name+": "+parseFloat(t.data.value).toFixed(0)+" g"))}function n(t,e,n,a){t.append("text").attr("x",n/2).attr("y",20).attr("text-anchor","middle").style("font-size","16px").style("font-weight","bold").text("Micronutrient Breakdown");n=n-60-20,a=a-20-50,e=e.filter((t=>!isNaN(parseFloat(t.value))));var i=d3.scaleBand().range([0,n]).padding(.1).domain(e.map((t=>t.name))),r=d3.scaleLinear().range([a,0]).domain([0,d3.max(e,(t=>parseFloat(t.value)))]),o=t.append("g").attr("transform","translate(60,20)");o.append("g").call(d3.axisLeft(r)).append("text").attr("fill","#000").attr("transform","rotate(-90)").attr("y",-50).attr("dy","1em").attr("text-anchor","end").style("font-weight","bold").text("% of recommended daily intake"),o.append("g").attr("transform","translate(0,"+a+")").call(d3.axisBottom(i)).append("text").attr("fill","#000").attr("x",n/2).attr("y",50).attr("dy","-1em").attr("text-anchor","middle").style("font-weight","bold").text("Micronutrients"),o.selectAll(".bar").data(e).enter().append("rect").attr("class","bar").attr("x",(t=>i(t.name))).attr("y",(t=>r(parseFloat(t.value)))).attr("width",i.bandwidth()).attr("height",(t=>a-r(parseFloat(t.value)))).attr("fill","hsl(173, 90%, 15%)")}function a(t){return t.charAt(0).toUpperCase()+t.slice(1)}t.d({},{Io:function(){return h},Hm:function(){return y}});const i={Cholesterol:300,Sodium:2300,Potassium:4700,Magnesium:420,Calcium:1e3,Iron:18,Zinc:11,VitaminA:900,VitaminE:15,VitaminC:90,VitaminB6:1.7,VitaminB12:2.4,VitaminD:20,VitaminK:120},r={ENERC_KCAL:"Calories",PROCNT:"Protein",FAT:"Fat",FASAT:"Saturated Fat",FATRN:"Trans Fat",CHOCDF:"Carbohydrates",SUGAR:"Sugar",FIBTG:"Fiber"},o={CA:"Calcium",CHOLE:"Cholesterol",FE:"Iron",K:"Potassium",MG:"Magnesium",NA:"Sodium",TOCPHA:"Vitamin E",VITA_RAE:"Vitamin A",VITB6A:"Vitamin B6",VITB12:"Vitamin B12",VITC:"Vitamin C",VITD:"Vitamin D",VITK1:"Vitamin K",ZN:"Zinc"};function l(t,e,n,a){let i={...t};return Object.keys(e.totalNutrients).forEach((l=>{if(o[l]&&t[o[l]]){let r=Number(e.totalNutrients[l].quantity)/a/n[o[l]]*100,u=Number(t[o[l]])-r;u<0&&(u=0),i[o[l]]=u.toFixed(0)}if(r[l]&&t[r[l]]){let n=Number(t[r[l]])-Number(e.totalNutrients[l].quantity)/a;n<0&&(n=0),i[r[l]]=n.toFixed(0)}})),i}const u="0cc0aea0",d="1e077dc53566f535c8e43010f6e729d5",c=document.querySelector(".search-result");const m=document.querySelector(".search-form"),s="9571bf1b",p="fd421218cb6bedd9fe774a93dd05e16e";let y,x=[];async function h(t,m){let v={q:t.searchQuery.length>0?t.searchQuery:void 0,time:t.minTime&&t.maxTime?`${t.minTime}-${t.maxTime}`:t.minTime?`${parseFloat(t.minTime)}+`:t.maxTime?`${t.maxTime}`:void 0,calories:t.minCalories&&t.maxCalories?`${t.minCalories}-${t.maxCalories}`:t.minCalories?`${t.minCalories}+`:t.maxCalories?`${t.maxCalories}`:void 0,"nutrients[CHOCDF]":t.minCarbs&&t.maxCarbs?`${t.minCarbs}-${t.maxCarbs}`:t.minCarbs?`${t.minCarbs}+`:t.maxCarbs?`${t.maxCarbs}`:void 0,"nutrients[FAT]":t.minFat&&t.maxFat?`${t.minFat}-${t.maxFat}`:t.minFat?`${t.minFat}+`:t.maxFat?`${t.maxFat}`:void 0,"nutrients[PROCNT]":t.minProtein&&t.maxProtein?`${t.minProtein}-${t.maxProtein}`:t.minProtein?`${t.minProtein}+`:t.maxProtein?`${t.maxProtein}`:void 0,mealType:t.mealType||void 0,cuisineType:t.cuisineType?t.cuisineType.toLowerCase():void 0,health:t.dietRestrictions.length>0?t.dietRestrictions:void 0,excluded:t.excludedIngredients.length>0?t.excludedIngredients:void 0},g=Object.keys(v).filter((t=>void 0!==v[t])).flatMap((t=>Array.isArray(v[t])?v[t].map((e=>`${encodeURIComponent(t)}=${encodeURIComponent(e)}`)):`${encodeURIComponent(t)}=${encodeURIComponent(v[t])}`)).join("&"),f=`https://api.edamam.com/api/recipes/v2?type=public&app_id=${s}&app_key=${p}&random=true&${g}`;const b=await fetch(f),C=await b.json();x=m?x.concat(C.hits.filter((t=>t.recipe.image))):C.hits.filter((t=>t.recipe.image)),function(t){let m="";t.map(((t,e)=>{const n=(t.recipe.calories/t.recipe.yield).toFixed(0),a=(t.recipe.totalNutrients.CHOCDF.quantity/t.recipe.yield).toFixed(0),i=(t.recipe.totalNutrients.PROCNT.quantity/t.recipe.yield).toFixed(0),r=(t.recipe.totalNutrients.FAT.quantity/t.recipe.yield).toFixed(0);m+=`\n            <div class="item">\n                <img src="${t.recipe.image}" alt="${t.recipe.label}">\n\n                <div class="flex-container">\n                    <h1 class="title">${t.recipe.label}</h1>\n                    <a class="view-recipe-button" href="${t.recipe.url}" target="_blank">View Recipe</a>\n                    <button class="modify-recipe-button" data-recipe-id="${e}">Modify Recipe</button>\n                </div>\n\n                <p class="item-data">\n                    <strong>Calories/Serving:</strong> ${n}\n                </p>\n                <p class="item-data">\n                    <strong>Macronutrients/Serving:</strong> ${a}g carbohydrates, ${i}g protein, ${r}g fat\n                </p>\n                <p class="item-data">\n                    <strong>Servings:</strong> ${t.recipe.yield.toFixed(0)}\n                </p>\n            </div>\n        `}));const s=document.querySelector(".find-more-recipes-button");s&&s.remove(),m+='\n    <button class="find-more-recipes-button">Find More Recipes</button>\n    ',c.innerHTML=m,document.querySelector(".find-more-recipes-button").addEventListener("click",(()=>h(y,!0))),document.querySelector(".search-form").style.display="none",document.querySelector(".back-to-search").style.display="block",c.style.display="block",document.querySelector(".back-to-search").addEventListener("click",(()=>{document.querySelector(".search-form").style.display="block",document.querySelector(".back-to-search").style.display="none",c.style.display="none",c.innerHTML=""})),document.querySelectorAll(".modify-recipe-button").forEach((m=>{m.addEventListener("click",(async m=>{const s=m.target.dataset.recipeId,p=t[s].recipe;let y=function(t){let e={};return t.ingredients.forEach((t=>{e[t.food]=t.weight})),e}(p),x=function(t,e){let n=t.yield;return{Calories:(t.calories/n).toFixed(0),Protein:(t.totalNutrients.PROCNT.quantity/n).toFixed(0),Fat:(t.totalNutrients.FAT.quantity/n).toFixed(0),"Saturated Fat":(t.totalNutrients.FASAT.quantity/n).toFixed(0),"Trans Fat":(t.totalNutrients.FATRN.quantity/n).toFixed(0),Carbohydrates:(t.totalNutrients.CHOCDF.quantity/n).toFixed(0),Sugar:(t.totalNutrients.SUGAR.quantity/n).toFixed(0),Fiber:(t.totalNutrients.FIBTG.quantity/n).toFixed(0),Cholesterol:(t.totalNutrients.CHOLE.quantity/i.Cholesterol/n*100).toFixed(0),Sodium:(t.totalNutrients.NA.quantity/i.Sodium/n*100).toFixed(0),Potassium:(t.totalNutrients.K.quantity/i.Potassium/n*100).toFixed(0),Magnesium:(t.totalNutrients.MG.quantity/i.Magnesium/n*100).toFixed(0),"Vitamin A":(t.totalNutrients.VITA_RAE.quantity/i.VitaminA/n*100).toFixed(0),"Vitamin E":(t.totalNutrients.TOCPHA.quantity/i.VitaminE/n*100).toFixed(0),"Vitamin C":(t.totalNutrients.VITC.quantity/i.VitaminC/n*100).toFixed(0),"Vitamin B6":(t.totalNutrients.VITB6A.quantity/i.VitaminB6/n*100).toFixed(0),"Vitamin B12":(t.totalNutrients.VITB12.quantity/i.VitaminB12/n*100).toFixed(0),"Vitamin D":(t.totalNutrients.VITD.quantity/i.VitaminD/n*100).toFixed(0),"Vitamin K":(t.totalNutrients.VITK1.quantity/i.VitaminK/n*100).toFixed(0),Calcium:(t.totalNutrients.CA.quantity/i.Calcium/n*100).toFixed(0),Iron:(t.totalNutrients.FE.quantity/i.Iron/n*100).toFixed(0),Zinc:(t.totalNutrients.ZN.quantity/i.Zinc/n*100).toFixed(0)}}(p);var h=document.querySelector(".nutrition");c.innerHTML="",document.querySelector(".search-form").innerHTML="";var v=document.querySelector(".ingredients-list");v.innerHTML="";let g="\n                <table>\n                    <tr>\n                        <th>Ingredient</th>\n                        <th>Weight (g)</th>\n                        <th>Actions</th>\n                    </tr>\n                ";Object.entries(y).forEach((t=>{let[e,n]=t;g+=`\n                    <tr>\n                        <td>${a(e)}</td>\n                        <td>${Math.floor(n)}</td>\n                        <td>\n                            <button class="remove-button">Remove Ingredient</button>\n                        </td>\n                    </tr>\n                `})),g+='\n                </table>\n                <div class="add-ingredient-div">\n                    <input type="text" id="ingredient-input" placeholder="Enter ingredient">\n                    <input type="number" id="weight-input" placeholder="Enter weight in grams">\n                    <button class="add-button">Add Ingredient</button>\n                </div>\n            ',v.innerHTML=g;var f=document.createElement("h2");f.innerHTML=`Total Calories: ${x.Calories}`,h.append(f),Object.keys(x).map((t=>({name:t,value:x[t]})));const b=500,C=500;let F=d3.create("svg").attr("width",b).attr("height",C);var q=["Protein","Fat","Carbohydrates"];e(F,q.map((t=>({name:t,value:x[t]}))),b,C),h.append(F.node());let T=d3.create("svg").attr("width",b).attr("height",C);var $=["Cholesterol","Sodium","Potassium","Magnesium","Calcium","Iron","Zinc","VitaminA","VitaminE","VitaminC","VitaminB6","VitaminB12","VitaminD","VitaminK"];n(T,$.map((t=>({name:t,value:x[t]}))),b,C),h.append(T.node()),document.querySelectorAll(".remove-button").forEach((t=>{t.addEventListener("click",(async function(t){const a=t.target.parentElement.parentElement.children[0].textContent,r=t.target.parentElement.parentElement.children[1].textContent,o=await fetch(`https://api.edamam.com/api/nutrition-data?app_id=${u}&app_key=${d}&nutrition-type=cooking&ingr=${a}-${r}g`),c=await o.json();x=l(x,c,i,p.yield),f.innerHTML=`Total Calories: ${x.Calories}`,F.selectAll("*").remove(),e(F,q.map((t=>({name:t,value:x[t]}))),b,C),T.selectAll("*").remove(),n(T,$.map((t=>({name:t,value:x[t]}))),b,C),t.target.parentElement.parentElement.remove()}))})),document.querySelector(".add-button").addEventListener("click",(async()=>{const t=document.querySelector("#ingredient-input").value,c=document.querySelector("#weight-input").value;if(!t||!c)return void alert("Please fill both ingredient and weight fields.");const m=await fetch(`https://api.edamam.com/api/nutrition-data?app_id=${u}&app_key=${d}&nutrition-type=cooking&ingr=${t}-${c}g`),s=await m.json();x=function(t,e,n,a){let i={...t};return Object.keys(e.totalNutrients).forEach((l=>{if(o[l]&&t[o[l]]){let r=Number(e.totalNutrients[l].quantity)/a/n[o[l]]*100,u=Number(t[o[l]])+r;i[o[l]]=u.toFixed(0)}if(r[l]&&t[r[l]]){let n=Number(t[r[l]])+Number(e.totalNutrients[l].quantity)/a;i[r[l]]=n.toFixed(0)}})),i}(x,s,i,p.yield);const y=document.createElement("tr");y.innerHTML=`\n                    <td>${a(t)}</td>\n                    <td>${Math.floor(c)}</td>\n                    <td>\n                        <button class="remove-button">Remove Ingredient</button>\n                    </td>\n                `,document.querySelector("table").appendChild(y),f.innerHTML=`Total Calories: ${x.Calories}`,F.selectAll("*").remove(),e(F,q.map((t=>({name:t,value:x[t]}))),b,C),T.selectAll("*").remove(),n(T,$.map((t=>({name:t,value:x[t]}))),b,C),document.querySelectorAll(".remove-button").forEach((t=>{t.addEventListener("click",(async function(t){const a=t.target.parentElement.parentElement.children[0].textContent,r=t.target.parentElement.parentElement.children[1].textContent,o=await fetch(`https://api.edamam.com/api/nutrition-data?app_id=${u}&app_key=${d}&nutrition-type=cooking&ingr=${a}-${r}g`),c=await o.json();x=l(x,c,i,p.yield),f.innerHTML=`Total Calories: ${x.Calories}`,F.selectAll("*").remove(),e(F,q.map((t=>({name:t,value:x[t]}))),b,C),T.selectAll("*").remove(),n(T,$.map((t=>({name:t,value:x[t]}))),b,C),t.target.parentElement.parentElement.remove()}))}))}))}))}))}(C.hits)}m.addEventListener("submit",(t=>{t.preventDefault(),t.target,y={searchQuery:document.querySelector('input[type="text"]').value,minTime:document.querySelector("#min-time-input").value,maxTime:document.querySelector("#max-time-input").value,minCalories:document.querySelector("#min-calories-input").value,maxCalories:document.querySelector("#max-calories-input").value,minCarbs:document.querySelector("#min-carbs-input").value,maxCarbs:document.querySelector("#max-carbs-input").value,minFat:document.querySelector("#min-fat-input").value,maxFat:document.querySelector("#max-fat-input").value,minProtein:document.querySelector("#min-protein-input").value,maxProtein:document.querySelector("#max-protein-input").value,mealType:document.querySelector(".meal-type-input").value,cuisineType:document.querySelector(".cuisine-input").value,dietRestrictions:Array.from(document.querySelectorAll('.dietary-restrictions input[type="checkbox"]:checked')).map((t=>t.value))||[],excludedIngredients:document.querySelector(".ingredient-search-field").querySelector('input[type="text"]').value.split(",").map((t=>t.trim())).filter((t=>t.length>0))||[]},h(y,!1)}))}()}();
//# sourceMappingURL=main.js.map